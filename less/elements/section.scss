// body { border: 5px solid red;}

section {
  width: 100%;
  margin: 0 auto;
  padding: $margin $margin/2;
  @include clearfix();

  .on-tablet({
    padding: $margin "calc((100% - #{$column-width})/2)";
  });

  .on-desktop({
    padding: $margin "calc((100% - #{$page-width})/2 + #{$margin})";
  });

  padding-bottom: 1.6*$margin;

  > * {
    max-width: $max-width;
  }

  section {
    width: auto;
    padding-left: 0;
    padding-right: 0;
  }

  @include make-section-colors-for($semantic-colors);
}

@mixin make-section-colors-for($colors) {
  // make section colors for a list of color variable names
  // sections will use variable names as class names

  $iterations: length($colors);

  @include make-section-color(1);

  @mixin make-section-color($index) when ($index <= $iterations) {

    $color-name: extract($colors, $index);
    $this-color: $$color-name;

    &.#{$color-name} {
      @include section-color($this-color);
    }

    @include make-section-color($index + 1);
  }
}

@mixin section-color($color) {
  @include set-lumafix($color, $background);
  background-color: $lumafix;
  @include contrast-text-against($lumafix);
}

@mixin section-color($color) when ($color = $warning) {
  // preferentially tint for more urgency
  & when ($contrast-ratio > 3) {
    h1, h2, h3 { .contrast-text-against($color; 3; $mode: tint;);}
  }
}

@mixin section-color($color) when ($color = $failure) {
  // preferentially tint for more urgency
  & when ($contrast-ratio > 3) {
    h1, h2, h3 { .contrast-text-against($color; 3; $mode: tint;);}
  }
}
