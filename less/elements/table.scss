table {
  @include border-radius();
  max-width: 100%;
  border-collapse: collapse;
  border-spacing: 0;
  @include table-color($background);
  @include make-table-colors-for($semantic-colors);
}

th, td {
  text-align: left;
  vertical-align: top;
  padding: .62*$padding;
}

thead th {
  vertical-align: bottom;
}

tr:first-child > th:first-child {
  border-top-left-radius: $border-radius;
}

tr:first-child > th:last-child {
  border-top-right-radius: $border-radius;
}

tr:last-child > td:first-child {
  border-bottom-left-radius: $border-radius;
}

tr:last-child > td:last-child {
  border-bottom-right-radius: $border-radius;
}

tr > td,
tr > th {
  &:first-child {
    padding-left: $padding;
  }
  &:last-child {
    padding-right: $padding;
  }
}

@mixin table-color($color) {

  @include set-a-color($color);
  @include set-c-color($color);

  $row-a: mix($a-color, $color, 25%);
  $row-b: $color;

  & th {
    @include invert-text-against($c-color);
  }

  & td {
    @include contrast-text-against($row-a);
  }

  & tr {
    @include colorize($row-b);

    &:nth-of-type(odd) {
      @include colorize($row-a);
    }
  }
}

@mixin make-table-colors-for($colors) {
  // make table colors for a list of color variable names
  // tables will use variable names as class names

  $iterations: length($colors);

  @include make-table-color(1);

  @mixin make-table-color($index) when ($index <= $iterations) {

    $color-name: extract($colors, $index);
    $this-color: $$color-name;

    &.#{$color-name} {
      @include table-color($this-color);
    }

    @include make-table-color($index + 1);
  }
}
